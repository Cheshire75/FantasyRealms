덱, 핸드, 필드
카드를 내보낸다.
카드를 추가?
컨테이너가 필요하다.

class abstract object
container
void receive(card){
컨테이너에 입력받은 카드를 추가
ex: 핸드로 카드를 가져온다. 필드에서 버려진 카드를 받는다. 새로운 게임을 위해 덱에 모든 카드를 새로 추가한다.
}
card send(int){
컨테이너에서 int번째 카드를 내보낸다.
return card
ex. 핸드에서 필드로 카드를 버린다. 덱에서 플레이어에게 보낼 카드를 내보낸다. 필드에 버려진 카드 중에서 플레이어에게 선택된 카드를 보내준다.

void clear(){
컨테이너에 담긴 모든 카드들을 폐기한다.
ex. 게임을 새로 시작할때 먼저 컨테이너에 담긴 모든 카드들을 폐기하고 새로운 카드를 받을 준비를 한다.
}



class 덱 : object
{
container[numOfAllCards]

void suffle()
clear로 컨테이너를 모두 비우고 새롭게 카드들을 덱에 무작위 순서대로 추가한다.
}


class 필드 : object
{
container[10]

bool isFull()
필드에 버려진 카드들의 수를 확인하고 게임이 끝났으면 true를 반환한다.
true or false

void showUp()
컨테이너에 포함된 카드들로 필드에 표시된 카드들을 새로고침한다.
}


class 핸드
{
container[8]
int score
int playerNumber

void countScore()
컨테이너에 담겨있는 카드들의 점수계산 함수를 실행시키고 반환된 점수들을 계산한다.

void spread(playerNumber){
playerNumber와 플레이어의 번호가 동일하다면 카드를 앞면으로 표시하고 동일하지 않다면 뒷면으로 표시해준다. 새로고침
}

class card{
abstract public class Card
{
    public string name;
    public string attribute;
    public int point;
    public int order;
    public bool isAvailable;
    public bool isPenalty;
    abstract public int scoring();
    public Hand hand;

    protected bool isThereAttrib(string _attrib)
    //hand에 _attrib 속성이 있는지 확인
    {
        foreach (var i in hand.myCards)
        {
            if (i.attribute == _attrib)
            {
                return true;
            }
        }
        return false;
    }

    protected bool isThereName(string _name)
    //hand에 _name이 있는지 확인
    {
        foreach (var i in hand.myCards)
        {
            if (i.name == _name)
            {
                return true;
            }
        }
        return false;
    }

    protected int eachAttrib(string _attrib)
    //hand에 포함된 _attrib 수를 확인
    {
        int cnt = 0;
        foreach (var i in hand.myCards)
        {
            if (i.attribute == _attrib)
            {
                cnt++;
            }
        }
        return cnt;
    }

    protected void exclude(string _attrib)
    //_attrib와 동일한 속성을 가진 카드들의 isAvailable를 false로 전환
    {
        foreach (var i in hand.myCards)
        {
            if (i.attribute == _attrib)
            {
                i.attribute = "";
            }
        }
    }

    protected void unavailableAttrib(string _attrib)
    {
        foreach (var i in hand.myCards)
        {
            if (i.attribute == _attrib)
            {
                i.isAvailable = false;
            }
        }
    }

    protected void availableName(string _name)
    {
        foreach (var i in hand.myCards)
        {
            if (i.name == _name)
            {
                i.isAvailable = true;
            }
        }
    }

    protected void deletePenalty(string _attrib)
    {
        foreach (var i in hand.myCards)
        {
            if (i.attribute == _attrib)
            {
                i.isPenalty = false;
            }
        }
    }
}
void copy(card)
선택한 카드의 속성과 이름을 복사해옴
}
